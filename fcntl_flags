#include <stdio.h>
#include <stdlib.h>
#include <string.h>

void *errorchecked_malloc(unsigned int);

int main(int argc, char *argv[]) {
    char *char_ptr;
    int *int_ptr;
    
    int mem_size;
    if (argc < 2)
        mem_size = 128;
    else
        mem_size = atoi(argv[1]);
    
    printf("\t[+] Allocating %d bytes of memory on the heap for char_ptr\n", mem_size);
    char_ptr = (char *) errorchecked_malloc(mem_size);
    strcpy(char_ptr, "Memory allocated successfully.");
    printf("char_ptr (%p) --> '%s'\n", char_ptr, char_ptr);
    
    printf("\t[+] Allocating 32 bytes of memory on the heap for int_ptr\n");
    int_ptr = (int *) errorchecked_malloc(32);
    *int_ptr = 123456;
    printf("int_ptr (%p) --> %d\n", int_ptr, *int_ptr);
    
    printf("\t[-] Freeing char_ptr's heap memory...\n");
    free(char_ptr);
    
    printf("\t[+] Allocating another 40 bytes for char_ptr\n");
    char_ptr = (char *) errorchecked_malloc(40);
    strcpy(char_ptr, "Updated heap data");
    printf("char_ptr (%p) --> '%s'\n", char_ptr, char_ptr);
    
    printf("\t[-] Freeing int_ptr's heap memory...\n");
    free(int_ptr);
    
    printf("\t[-] Freeing char_ptr's heap memory...\n");
    free(char_ptr);
}

void *errorchecked_malloc(unsigned int size) {
    void *ptr = malloc(size);
    if (ptr == NULL) {
        fprintf(stderr, "Error: could not allocate heap memory.\n");
        exit(-1);
    }
    return ptr;
}
