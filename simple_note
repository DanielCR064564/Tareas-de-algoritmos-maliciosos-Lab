#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <fcntl.h>
#include <sys/stat.h>

void usage(char *prog_name, char *filename) {
    printf("Usage: %s <data to add to %s>\n", prog_name, filename);
    exit(1);
}

void fatal(char *);           
void *ec_malloc(unsigned int); 

int main(int argc, char *argv[]) {
    int fd; 
    char *buffer, *datafile;
    buffer = (char *) ec_malloc(150);
    datafile = (char *) ec_malloc(30);
    strcpy(datafile, "/var/log/notes");

    if(argc < 3)               
        usage(argv[0], datafile); 

    strcpy(buffer, argv[2]);  
    printf("[DEBUG] buffer @ %p: \'%s\'\n", buffer, buffer);
    printf("[DEBUG] datafile @ %p: \'%s\'\n", datafile, datafile);
    strncat(buffer, "\t", 1); 
 
    fd = open(datafile, O_WRONLY | O_CREAT | O_TRUNC, S_IRUSR | S_IWUSR);
    if(fd == -1)
        fatal("in main() while opening file");

    printf("[DEBUG] file descriptor is %d\n", fd);
 
    if(write(fd, buffer, strlen(buffer)) == -1)
        fatal("in main() while writing buffer to file");

    if(close(fd) == -1)
        fatal("in main() while closing file");

    printf("Note has been successfully saved.\n");

    free(buffer);
    free(datafile);
}
 
void fatal(char *message) {
    char error_message[150];
    strcpy(error_message, "[!!] Critical Error ");
    strncat(error_message, message, 100);
    perror(error_message);
    exit(-2);
}

void *ec_malloc(unsigned int size) {
    void *ptr;
    ptr = malloc(size);
    if(ptr == NULL)
        fatal("in ec_malloc() on memory allocation failure");
    return ptr;
}
